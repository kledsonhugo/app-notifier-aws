D:\Checkpoint 3\app-notifier\terraform>terraform plan -out tfplan
module.network.aws_vpc.vpc: Refreshing state... [id=vpc-09a6e7249977fa068]
module.database.aws_db_parameter_group.rds_param_group: Refreshing state... [id=rds-param-group-notifier]
module.network.aws_internet_gateway.igw: Refreshing state... [id=igw-0d78909eab1aa995e]
module.network.aws_route_table.rt_priv: Refreshing state... [id=rtb-026d937d3842e5202]
module.network.aws_subnet.sn_priv_az2: Refreshing state... [id=subnet-0708d1cbdc9987ba7]
module.network.aws_subnet.sn_pub_az2: Refreshing state... [id=subnet-041a4a741a9acc498]
module.network.aws_subnet.sn_pub_az1: Refreshing state... [id=subnet-0f092e37d1bbfa298]
module.network.aws_subnet.sn_priv_az1: Refreshing state... [id=subnet-03be503df9da180ae]
module.compute.aws_lb_target_group.ec2_lb_tg: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:954238113230:targetgroup/ec2-lb-tg-notifier/dde870d916e7c1e6]
module.network.aws_security_group.vpc_sg_priv: Refreshing state... [id=sg-091c731e58c8e883f]
module.network.aws_security_group.vpc_sg_pub: Refreshing state... [id=sg-0dc1fffeacf126fc5]
module.network.aws_route_table.rt_pub: Refreshing state... [id=rtb-051b1f72ee7b9574b]
module.network.aws_route_table_association.rt_pub_sn_priv_az2: Refreshing state... [id=rtbassoc-08bed0907a25e3d82]
module.network.aws_route_table_association.rt_pub_sn_priv_az1: Refreshing state... [id=rtbassoc-0aecce5c0ddf14af1]
module.database.aws_db_subnet_group.rds_sn_group: Refreshing state... [id=rds-sn-group-notifier]
module.compute.aws_lb.ec2_lb: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:954238113230:loadbalancer/app/ec2-lb-notifier/367ef9f0848d899a]
module.network.aws_route_table_association.rt_pub_sn_pub_az2: Refreshing state... [id=rtbassoc-05e214b5deb13ac54]
module.network.aws_route_table_association.rt_pub_sn_pub_az1: Refreshing state... [id=rtbassoc-0bd77694577e78cf4]
module.database.aws_db_instance.rds_dbinstance: Refreshing state... [id=rds-notifier]
module.compute.aws_lb_listener.ec2_lb_listener: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:954238113230:listener/app/ec2-lb-notifier/367ef9f0848d899a/7b28e57705dfc732]
module.compute.aws_launch_template.ec2_lt: Refreshing state... [id=lt-085c809cd2426a892]
module.compute.aws_autoscaling_group.ec2_asg: Refreshing state... [id=ec2-asg-notifier]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  ~ update in-place
-/+ destroy and then create replacement
 <= read (data resources)

Terraform will perform the following actions:

  # module.compute.data.template_file.user_data will be read during apply
  # (config refers to values not yet known)
 <= data "template_file" "user_data" {
      + id       = (known after apply)
      + rendered = (known after apply)
      + template = <<-EOT
            #!/bin/bash


            # 1- Update/Install required OS packages
            yum update -y
            amazon-linux-extras install -y php7.2 epel
            yum install -y httpd mysql php-mtdowling-jmespath-php php-xml telnet tree git


            # 2- (Optional) Enable PHP to send AWS SNS events
            # NOTE: If uncommented, more configs are required
            # - Step 4: Deploy PHP app
            # - Module Compute: compute.tf and vars.tf manifests

            # 2.1- Config AWS SDK for PHP
            # mkdir -p /opt/aws/sdk/php/
            # cd /opt/aws/sdk/php/
            # wget https://docs.aws.amazon.com/aws-sdk-php/v3/download/aws.zip
            # unzip aws.zip

            # 2.2- Config AWS Account
            # mkdir -p /var/www/html/.aws/
            # cat <<EOT >> /var/www/html/.aws/credentials
            # [default]
            # aws_access_key_id=12345
            # aws_secret_access_key=12345
            # aws_session_token=12345
            # EOT


            # 3- Config PHP app Connection to Database
            cat <<EOT >> /var/www/config.php
            <?php
            define('DB_SERVER', '${rds_endpoint}');
            define('DB_USERNAME', '${rds_dbuser}');
            define('DB_PASSWORD', '${rds_dbpassword}');
            define('DB_DATABASE', '${rds_dbname}');
            ?>
            EOT


            # 4- Deploy PHP app
            cd /tmp
            git clone https://github.com/kledsonhugo/notifier
            cp /tmp/notifier/app/*.php /var/www/html/
            # mv /var/www/html/sendsms.php /var/www/html/index.php
            rm -rf /tmp/notifier


            # 5- Config Apache WebServer
            usermod -a -G apache ec2-user
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} \;
            find /var/www -type f -exec chmod 0664 {} \;


            # 6- Start Apache WebServer
            systemctl enable httpd
            service httpd restart
        EOT
      + vars     = {
          + "rds_dbname"     = "rdsdbgabriel"
          + "rds_dbpassword" = "rdsdbadminpwd"
          + "rds_dbuser"     = "rdsdbadmin"
          + "rds_endpoint"   = (known after apply)
        }
    }

  # module.compute.aws_autoscaling_group.ec2_asg must be replaced
-/+ resource "aws_autoscaling_group" "ec2_asg" {
      ~ arn                       = "arn:aws:autoscaling:us-east-1:954238113230:autoScalingGroup:5f55628a-d2ea-40d4-b6f1-68aff19ba76e:autoScalingGroupName/ec2-asg-notifier" -> (known after apply)
      ~ availability_zones        = [
          - "us-east-1a",
          - "us-east-1c",
        ] -> (known after apply)
      - capacity_rebalance        = false -> null
      ~ default_cooldown          = 300 -> (known after apply)
      - default_instance_warmup   = 0 -> null
      - enabled_metrics           = [] -> null
      ~ health_check_type         = "EC2" -> (known after apply)
      ~ id                        = "ec2-asg-notifier" -> (known after apply)
      - load_balancers            = [] -> null
      - max_instance_lifetime     = 0 -> null
      ~ name                      = "ec2-asg-notifier" -> "ec2-asg-gabriel" # forces replacement
      + name_prefix               = (known after apply)
      ~ service_linked_role_arn   = "arn:aws:iam::954238113230:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling" -> (known after apply)
      - suspended_processes       = [] -> null
      ~ target_group_arns         = [
          - "arn:aws:elasticloadbalancing:us-east-1:954238113230:targetgroup/ec2-lb-tg-notifier/dde870d916e7c1e6",
        ] -> (known after apply)
      - termination_policies      = [] -> null
      ~ vpc_zone_identifier       = [
          - "subnet-041a4a741a9acc498",
          - "subnet-0f092e37d1bbfa298",
        ] -> (known after apply)
        # (9 unchanged attributes hidden)

      ~ launch_template {
          ~ id      = "lt-085c809cd2426a892" -> (known after apply)
          ~ name    = "ec2-lt-notifier" -> (known after apply)
            # (1 unchanged attribute hidden)
        }
    }

  # module.compute.aws_launch_template.ec2_lt must be replaced
-/+ resource "aws_launch_template" "ec2_lt" {
      ~ arn                     = "arn:aws:ec2:us-east-1:954238113230:launch-template/lt-085c809cd2426a892" -> (known after apply)
      ~ default_version         = 1 -> (known after apply)
      - disable_api_stop        = false -> null
      - disable_api_termination = false -> null
      ~ id                      = "lt-085c809cd2426a892" -> (known after apply)
      ~ latest_version          = 1 -> (known after apply)
      ~ name                    = "ec2-lt-notifier" -> "ec2-lt-gabriel" # forces replacement
      + name_prefix             = (known after apply)
      - security_group_names    = [] -> null
      - tags                    = {} -> null
      ~ tags_all                = {} -> (known after apply)
      ~ user_data               = "IyEvYmluL2Jhc2gNCg0KDQojIDEtIFVwZGF0ZS9JbnN0YWxsIHJlcXVpcmVkIE9TIHBhY2thZ2VzDQp5dW0gdXBkYXRlIC15DQphbWF6b24tbGludXgtZXh0cmFzIGluc3RhbGwgLXkgcGhwNy4yIGVwZWwNCnl1bSBpbnN0YWxsIC15IGh0dHBkIG15c3FsIHBocC1tdGRvd2xpbmctam1lc3BhdGgtcGhwIHBocC14bWwgdGVsbmV0IHRyZWUgZ2l0DQoNCg0KIyAyLSAoT3B0aW9uYWwpIEVuYWJsZSBQSFAgdG8gc2VuZCBBV1MgU05TIGV2ZW50cw0KIyBOT1RFOiBJZiB1bmNvbW1lbnRlZCwgbW9yZSBjb25maWdzIGFyZSByZXF1aXJlZA0KIyAtIFN0ZXAgNDogRGVwbG95IFBIUCBhcHANCiMgLSBNb2R1bGUgQ29tcHV0ZTogY29tcHV0ZS50ZiBhbmQgdmFycy50ZiBtYW5pZmVzdHMNCg0KIyAyLjEtIENvbmZpZyBBV1MgU0RLIGZvciBQSFANCiMgbWtkaXIgLXAgL29wdC9hd3Mvc2RrL3BocC8NCiMgY2QgL29wdC9hd3Mvc2RrL3BocC8NCiMgd2dldCBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vYXdzLXNkay1waHAvdjMvZG93bmxvYWQvYXdzLnppcA0KIyB1bnppcCBhd3MuemlwDQoNCiMgMi4yLSBDb25maWcgQVdTIEFjY291bnQNCiMgbWtkaXIgLXAgL3Zhci93d3cvaHRtbC8uYXdzLw0KIyBjYXQgPDxFT1QgPj4gL3Zhci93d3cvaHRtbC8uYXdzL2NyZWRlbnRpYWxzDQojIFtkZWZhdWx0XQ0KIyBhd3NfYWNjZXNzX2tleV9pZD0xMjM0NQ0KIyBhd3Nfc2VjcmV0X2FjY2Vzc19rZXk9MTIzNDUNCiMgYXdzX3Nlc3Npb25fdG9rZW49MTIzNDUNCiMgRU9UDQoNCg0KIyAzLSBDb25maWcgUEhQIGFwcCBDb25uZWN0aW9uIHRvIERhdGFiYXNlDQpjYXQgPDxFT1QgPj4gL3Zhci93d3cvY29uZmlnLnBocA0KPD9waHANCmRlZmluZSgnREJfU0VSVkVSJywgJ3Jkcy1ub3RpZmllci5jb3hjOWtvc2ljbGEudXMtZWFzdC0xLnJkcy5hbWF6b25hd3MuY29tOjMzMDYnKTsNCmRlZmluZSgnREJfVVNFUk5BTUUnLCAncmRzZGJhZG1pbicpOw0KZGVmaW5lKCdEQl9QQVNTV09SRCcsICdyZHNkYmFkbWlucHdkJyk7DQpkZWZpbmUoJ0RCX0RBVEFCQVNFJywgJ3Jkc2Ribm90aWZpZXInKTsNCj8+DQpFT1QNCg0KDQojIDQtIERlcGxveSBQSFAgYXBwDQpjZCAvdG1wDQpnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2tsZWRzb25odWdvL25vdGlmaWVyDQpjcCAvdG1wL25vdGlmaWVyL2FwcC8qLnBocCAvdmFyL3d3dy9odG1sLw0KIyBtdiAvdmFyL3d3dy9odG1sL3NlbmRzbXMucGhwIC92YXIvd3d3L2h0bWwvaW5kZXgucGhwDQpybSAtcmYgL3RtcC9ub3RpZmllcg0KDQoNCiMgNS0gQ29uZmlnIEFwYWNoZSBXZWJTZXJ2ZXINCnVzZXJtb2QgLWEgLUcgYXBhY2hlIGVjMi11c2VyDQpjaG93biAtUiBlYzItdXNlcjphcGFjaGUgL3Zhci93d3cNCmNobW9kIDI3NzUgL3Zhci93d3cNCmZpbmQgL3Zhci93d3cgLXR5cGUgZCAtZXhlYyBjaG1vZCAyNzc1IHt9IFw7DQpmaW5kIC92YXIvd3d3IC10eXBlIGYgLWV4ZWMgY2htb2QgMDY2NCB7fSBcOw0KDQoNCiMgNi0gU3RhcnQgQXBhY2hlIFdlYlNlcnZlcg0Kc3lzdGVtY3RsIGVuYWJsZSBodHRwZA0Kc2VydmljZSBodHRwZCByZXN0YXJ0" -> (known after apply)
      ~ vpc_security_group_ids  = [
          - "sg-0dc1fffeacf126fc5",
        ] -> (known after apply)
        # (3 unchanged attributes hidden)
    }

  # module.compute.aws_lb.ec2_lb must be replaced
-/+ resource "aws_lb" "ec2_lb" {
      ~ arn                                         = "arn:aws:elasticloadbalancing:us-east-1:954238113230:loadbalancer/app/ec2-lb-notifier/367ef9f0848d899a" -> (known after apply)
      ~ arn_suffix                                  = "app/ec2-lb-notifier/367ef9f0848d899a" -> (known after apply)
      ~ dns_name                                    = "ec2-lb-notifier-1519151557.us-east-1.elb.amazonaws.com" -> (known after apply)
      - enable_cross_zone_load_balancing            = true -> null
      ~ id                                          = "arn:aws:elasticloadbalancing:us-east-1:954238113230:loadbalancer/app/ec2-lb-notifier/367ef9f0848d899a" -> (known after apply)
      ~ internal                                    = false -> (known after apply)
      ~ ip_address_type                             = "ipv4" -> (known after apply)
      ~ name                                        = "ec2-lb-notifier" -> "ec2-lb-gabriel" # forces replacement
      ~ security_groups                             = [
          - "sg-0dc1fffeacf126fc5",
        ] -> (known after apply)
      ~ subnets                                     = [
          - "subnet-041a4a741a9acc498",
          - "subnet-0f092e37d1bbfa298",
        ] -> (known after apply)
      - tags                                        = {} -> null
      ~ tags_all                                    = {} -> (known after apply)
      ~ vpc_id                                      = "vpc-09a6e7249977fa068" -> (known after apply)
      ~ zone_id                                     = "Z35SXDOTRQ7X7K" -> (known after apply)
        # (11 unchanged attributes hidden)

      - access_logs {
          - enabled = false -> null
        }

      - subnet_mapping {
          - subnet_id = "subnet-041a4a741a9acc498" -> null
        }
      - subnet_mapping {
          - subnet_id = "subnet-0f092e37d1bbfa298" -> null
        }
    }

  # module.compute.aws_lb_listener.ec2_lb_listener must be replaced
-/+ resource "aws_lb_listener" "ec2_lb_listener" {
      ~ arn               = "arn:aws:elasticloadbalancing:us-east-1:954238113230:listener/app/ec2-lb-notifier/367ef9f0848d899a/7b28e57705dfc732" -> (known after apply)
      ~ id                = "arn:aws:elasticloadbalancing:us-east-1:954238113230:listener/app/ec2-lb-notifier/367ef9f0848d899a/7b28e57705dfc732" -> (known after apply)
      ~ load_balancer_arn = "arn:aws:elasticloadbalancing:us-east-1:954238113230:loadbalancer/app/ec2-lb-notifier/367ef9f0848d899a" # forces replacement -> (known after apply) # forces replacement
      + ssl_policy        = (known after apply)
      - tags              = {} -> null
      ~ tags_all          = {} -> (known after apply)
        # (2 unchanged attributes hidden)

      ~ default_action {
          ~ order            = 1 -> (known after apply)
          ~ target_group_arn = "arn:aws:elasticloadbalancing:us-east-1:954238113230:targetgroup/ec2-lb-tg-notifier/dde870d916e7c1e6" -> (known after apply)
            # (1 unchanged attribute hidden)
        }
    }

  # module.compute.aws_lb_target_group.ec2_lb_tg must be replaced
-/+ resource "aws_lb_target_group" "ec2_lb_tg" {
      ~ arn                                = "arn:aws:elasticloadbalancing:us-east-1:954238113230:targetgroup/ec2-lb-tg-notifier/dde870d916e7c1e6" -> (known after apply)
      ~ arn_suffix                         = "targetgroup/ec2-lb-tg-notifier/dde870d916e7c1e6" -> (known after apply)
      ~ id                                 = "arn:aws:elasticloadbalancing:us-east-1:954238113230:targetgroup/ec2-lb-tg-notifier/dde870d916e7c1e6" -> (known after apply)
      ~ ip_address_type                    = "ipv4" -> (known after apply)
      ~ load_balancing_algorithm_type      = "round_robin" -> (known after apply)
      ~ load_balancing_cross_zone_enabled  = "use_load_balancer_configuration" -> (known after apply)
      ~ name                               = "ec2-lb-tg-notifier" -> "ec2-lb-tg-gabriel" # forces replacement
      + preserve_client_ip                 = (known after apply)
      ~ protocol_version                   = "HTTP1" -> (known after apply)
      - tags                               = {} -> null
      ~ tags_all                           = {} -> (known after apply)
      ~ vpc_id                             = "vpc-09a6e7249977fa068" # forces replacement -> (known after apply) # forces replacement
        # (8 unchanged attributes hidden)

      - health_check {
          - enabled             = true -> null
          - healthy_threshold   = 5 -> null
          - interval            = 30 -> null
          - matcher             = "200" -> null
          - path                = "/" -> null
          - port                = "traffic-port" -> null
          - protocol            = "HTTP" -> null
          - timeout             = 5 -> null
          - unhealthy_threshold = 2 -> null
        }

      - stickiness {
          - cookie_duration = 86400 -> null
          - enabled         = false -> null
          - type            = "lb_cookie" -> null
        }

      - target_failover {}
    }

  # module.database.aws_db_instance.rds_dbinstance must be replaced
-/+ resource "aws_db_instance" "rds_dbinstance" {
      ~ address                               = "rds-notifier.coxc9kosicla.us-east-1.rds.amazonaws.com" -> (known after apply)
      ~ arn                                   = "arn:aws:rds:us-east-1:954238113230:db:rds-notifier" -> (known after apply)
      ~ availability_zone                     = "us-east-1c" -> (known after apply)
      ~ backup_retention_period               = 0 -> (known after apply)
      ~ backup_window                         = "05:21-05:51" -> (known after apply)
      ~ ca_cert_identifier                    = "rds-ca-2019" -> (known after apply)
      + character_set_name                    = (known after apply)
      - customer_owned_ip_enabled             = false -> null
      ~ db_name                               = "rdsdbnotifier" -> "rdsdbgabriel" # forces replacement
      ~ db_subnet_group_name                  = "rds-sn-group-notifier" -> "rds-sn-group-gabriel"
      - deletion_protection                   = false -> null
      - enabled_cloudwatch_logs_exports       = [] -> null
      ~ endpoint                              = "rds-notifier.coxc9kosicla.us-east-1.rds.amazonaws.com:3306" -> (known after apply)
      ~ engine_version_actual                 = "8.0.23" -> (known after apply)
      ~ hosted_zone_id                        = "Z2R2ITUGPM61AM" -> (known after apply)
      - iam_database_authentication_enabled   = false -> null
      ~ id                                    = "rds-notifier" -> (known after apply)
      ~ identifier                            = "rds-notifier" -> "rds-gabriel" # forces replacement
      + identifier_prefix                     = (known after apply)
      ~ iops                                  = 0 -> (known after apply)
      + kms_key_id                            = (known after apply)
      + latest_restorable_time                = (known after apply)
      ~ license_model                         = "general-public-license" -> (known after apply)
      ~ listener_endpoint                     = [] -> (known after apply)
      ~ maintenance_window                    = "fri:09:29-fri:09:59" -> (known after apply)
      ~ master_user_secret                    = [] -> (known after apply)
      + master_user_secret_kms_key_id         = (known after apply)
      + monitoring_role_arn                   = (known after apply)
      ~ name                                  = "rdsdbnotifier" -> (known after apply)
      + nchar_character_set_name              = (known after apply)
      ~ network_type                          = "IPV4" -> (known after apply)
      ~ option_group_name                     = "default:mysql-8-0" -> (known after apply)
      ~ parameter_group_name                  = "rds-param-group-notifier" -> "rds-param-group-gabriel"
      + performance_insights_kms_key_id       = (known after apply)
      ~ performance_insights_retention_period = 0 -> (known after apply)
      ~ port                                  = 3306 -> (known after apply)
      + replica_mode                          = (known after apply)
      ~ replicas                              = [] -> (known after apply)
      ~ resource_id                           = "db-N2O64JYGU2A5GD4K7WX7POVO2U" -> (known after apply)
      - security_group_names                  = [] -> null
      + snapshot_identifier                   = (known after apply)
      ~ status                                = "available" -> (known after apply)
      - storage_encrypted                     = false -> null
      ~ storage_throughput                    = 0 -> (known after apply)
      - tags                                  = {} -> null
      ~ tags_all                              = {} -> (known after apply)
      + timezone                              = (known after apply)
      ~ vpc_security_group_ids                = [
          - "sg-091c731e58c8e883f",
        ] -> (known after apply)
        # (17 unchanged attributes hidden)
    }

  # module.database.aws_db_parameter_group.rds_param_group must be replaced
-/+ resource "aws_db_parameter_group" "rds_param_group" {
      ~ arn         = "arn:aws:rds:us-east-1:954238113230:pg:rds-param-group-notifier" -> (known after apply)
      ~ id          = "rds-param-group-notifier" -> (known after apply)
      ~ name        = "rds-param-group-notifier" -> "rds-param-group-gabriel" # forces replacement
      + name_prefix = (known after apply)
      - tags        = {} -> null
      ~ tags_all    = {} -> (known after apply)
        # (2 unchanged attributes hidden)

        # (2 unchanged blocks hidden)
    }

  # module.database.aws_db_subnet_group.rds_sn_group must be replaced
-/+ resource "aws_db_subnet_group" "rds_sn_group" {
      ~ arn                     = "arn:aws:rds:us-east-1:954238113230:subgrp:rds-sn-group-notifier" -> (known after apply)
      ~ id                      = "rds-sn-group-notifier" -> (known after apply)
      ~ name                    = "rds-sn-group-notifier" -> "rds-sn-group-gabriel" # forces replacement
      + name_prefix             = (known after apply)
      ~ subnet_ids              = [
          - "subnet-03be503df9da180ae",
          - "subnet-0708d1cbdc9987ba7",
        ] -> (known after apply)
      ~ supported_network_types = [
          - "IPV4",
        ] -> (known after apply)
      - tags                    = {} -> null
      ~ tags_all                = {} -> (known after apply)
        # (1 unchanged attribute hidden)
    }

  # module.network.aws_internet_gateway.igw will be updated in-place
  ~ resource "aws_internet_gateway" "igw" {
        id       = "igw-0d78909eab1aa995e"
        tags     = {}
      ~ vpc_id   = "vpc-09a6e7249977fa068" -> (known after apply)
        # (3 unchanged attributes hidden)
    }

  # module.network.aws_route_table.rt_priv must be replaced
-/+ resource "aws_route_table" "rt_priv" {
      ~ arn              = "arn:aws:ec2:us-east-1:954238113230:route-table/rtb-026d937d3842e5202" -> (known after apply)
      ~ id               = "rtb-026d937d3842e5202" -> (known after apply)
      ~ owner_id         = "954238113230" -> (known after apply)
      ~ propagating_vgws = [] -> (known after apply)
      ~ route            = [] -> (known after apply)
      - tags             = {} -> null
      ~ tags_all         = {} -> (known after apply)
      ~ vpc_id           = "vpc-09a6e7249977fa068" # forces replacement -> (known after apply) # forces replacement
    }

  # module.network.aws_route_table.rt_pub must be replaced
-/+ resource "aws_route_table" "rt_pub" {
      ~ arn              = "arn:aws:ec2:us-east-1:954238113230:route-table/rtb-051b1f72ee7b9574b" -> (known after apply)
      ~ id               = "rtb-051b1f72ee7b9574b" -> (known after apply)
      ~ owner_id         = "954238113230" -> (known after apply)
      ~ propagating_vgws = [] -> (known after apply)
      - tags             = {} -> null
      ~ tags_all         = {} -> (known after apply)
      ~ vpc_id           = "vpc-09a6e7249977fa068" # forces replacement -> (known after apply) # forces replacement
        # (1 unchanged attribute hidden)
    }

  # module.network.aws_route_table_association.rt_pub_sn_priv_az1 must be replaced
-/+ resource "aws_route_table_association" "rt_pub_sn_priv_az1" {
      ~ id             = "rtbassoc-0aecce5c0ddf14af1" -> (known after apply)
      ~ route_table_id = "rtb-026d937d3842e5202" -> (known after apply)
      ~ subnet_id      = "subnet-03be503df9da180ae" # forces replacement -> (known after apply) # forces replacement
    }

  # module.network.aws_route_table_association.rt_pub_sn_priv_az2 must be replaced
-/+ resource "aws_route_table_association" "rt_pub_sn_priv_az2" {
      ~ id             = "rtbassoc-08bed0907a25e3d82" -> (known after apply)
      ~ route_table_id = "rtb-026d937d3842e5202" -> (known after apply)
      ~ subnet_id      = "subnet-0708d1cbdc9987ba7" # forces replacement -> (known after apply) # forces replacement
    }

  # module.network.aws_route_table_association.rt_pub_sn_pub_az1 must be replaced
-/+ resource "aws_route_table_association" "rt_pub_sn_pub_az1" {
      ~ id             = "rtbassoc-0bd77694577e78cf4" -> (known after apply)
      ~ route_table_id = "rtb-051b1f72ee7b9574b" -> (known after apply)
      ~ subnet_id      = "subnet-0f092e37d1bbfa298" # forces replacement -> (known after apply) # forces replacement
    }

  # module.network.aws_route_table_association.rt_pub_sn_pub_az2 must be replaced
-/+ resource "aws_route_table_association" "rt_pub_sn_pub_az2" {
      ~ id             = "rtbassoc-05e214b5deb13ac54" -> (known after apply)
      ~ route_table_id = "rtb-051b1f72ee7b9574b" -> (known after apply)
      ~ subnet_id      = "subnet-041a4a741a9acc498" # forces replacement -> (known after apply) # forces replacement
    }

  # module.network.aws_security_group.vpc_sg_priv must be replaced
-/+ resource "aws_security_group" "vpc_sg_priv" {
      ~ arn                    = "arn:aws:ec2:us-east-1:954238113230:security-group/sg-091c731e58c8e883f" -> (known after apply)
      ~ id                     = "sg-091c731e58c8e883f" -> (known after apply)
      ~ ingress                = [
          - {
              - cidr_blocks      = [
                  - "10.0.0.0/16",
                ]
              - description      = ""
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "-1"
              - security_groups  = []
              - self             = false
              - to_port          = 0
            },
          + {
              + cidr_blocks      = [
                  + "30.0.0.0/16",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      ~ name                   = "terraform-20230426234124453400000001" -> (known after apply)
      ~ name_prefix            = "terraform-" -> (known after apply)
      ~ owner_id               = "954238113230" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      ~ vpc_id                 = "vpc-09a6e7249977fa068" # forces replacement -> (known after apply) # forces replacement
        # (3 unchanged attributes hidden)
    }

  # module.network.aws_security_group.vpc_sg_pub must be replaced
-/+ resource "aws_security_group" "vpc_sg_pub" {
      ~ arn                    = "arn:aws:ec2:us-east-1:954238113230:security-group/sg-0dc1fffeacf126fc5" -> (known after apply)
      ~ id                     = "sg-0dc1fffeacf126fc5" -> (known after apply)
      ~ ingress                = [
          - {
              - cidr_blocks      = [
                  - "10.0.0.0/16",
                ]
              - description      = ""
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "-1"
              - security_groups  = []
              - self             = false
              - to_port          = 0
            },
          + {
              + cidr_blocks      = [
                  + "30.0.0.0/16",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
            # (2 unchanged elements hidden)
        ]
      ~ name                   = "terraform-20230426234124456000000002" -> (known after apply)
      ~ name_prefix            = "terraform-" -> (known after apply)
      ~ owner_id               = "954238113230" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      ~ vpc_id                 = "vpc-09a6e7249977fa068" # forces replacement -> (known after apply) # forces replacement
        # (3 unchanged attributes hidden)
    }

  # module.network.aws_subnet.sn_priv_az1 must be replaced
-/+ resource "aws_subnet" "sn_priv_az1" {
      ~ arn                                            = "arn:aws:ec2:us-east-1:954238113230:subnet/subnet-03be503df9da180ae" -> (known after apply)
      ~ availability_zone_id                           = "use1-az1" -> (known after apply)
      ~ cidr_block                                     = "10.0.3.0/24" -> "30.0.3.0/24" # forces replacement
      - enable_lni_at_device_index                     = 0 -> null
      ~ id                                             = "subnet-03be503df9da180ae" -> (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      - map_customer_owned_ip_on_launch                = false -> null
      ~ owner_id                                       = "954238113230" -> (known after apply)
      ~ private_dns_hostname_type_on_launch            = "ip-name" -> (known after apply)
      - tags                                           = {} -> null
      ~ tags_all                                       = {} -> (known after apply)
      ~ vpc_id                                         = "vpc-09a6e7249977fa068" # forces replacement -> (known after apply) # forces replacement
        # (7 unchanged attributes hidden)
    }

  # module.network.aws_subnet.sn_priv_az2 must be replaced
-/+ resource "aws_subnet" "sn_priv_az2" {
      ~ arn                                            = "arn:aws:ec2:us-east-1:954238113230:subnet/subnet-0708d1cbdc9987ba7" -> (known after apply)
      ~ availability_zone_id                           = "use1-az4" -> (known after apply)
      ~ cidr_block                                     = "10.0.4.0/24" -> "30.0.4.0/24" # forces replacement
      - enable_lni_at_device_index                     = 0 -> null
      ~ id                                             = "subnet-0708d1cbdc9987ba7" -> (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      - map_customer_owned_ip_on_launch                = false -> null
      ~ owner_id                                       = "954238113230" -> (known after apply)
      ~ private_dns_hostname_type_on_launch            = "ip-name" -> (known after apply)
      - tags                                           = {} -> null
      ~ tags_all                                       = {} -> (known after apply)
      ~ vpc_id                                         = "vpc-09a6e7249977fa068" # forces replacement -> (known after apply) # forces replacement
        # (7 unchanged attributes hidden)
    }

  # module.network.aws_subnet.sn_pub_az1 must be replaced
-/+ resource "aws_subnet" "sn_pub_az1" {
      ~ arn                                            = "arn:aws:ec2:us-east-1:954238113230:subnet/subnet-0f092e37d1bbfa298" -> (known after apply)
      ~ availability_zone_id                           = "use1-az1" -> (known after apply)
      ~ cidr_block                                     = "10.0.1.0/24" -> "30.0.1.0/24" # forces replacement
      - enable_lni_at_device_index                     = 0 -> null
      ~ id                                             = "subnet-0f092e37d1bbfa298" -> (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      - map_customer_owned_ip_on_launch                = false -> null
      ~ owner_id                                       = "954238113230" -> (known after apply)
      ~ private_dns_hostname_type_on_launch            = "ip-name" -> (known after apply)
      - tags                                           = {} -> null
      ~ tags_all                                       = {} -> (known after apply)
      ~ vpc_id                                         = "vpc-09a6e7249977fa068" # forces replacement -> (known after apply) # forces replacement
        # (7 unchanged attributes hidden)
    }

  # module.network.aws_subnet.sn_pub_az2 must be replaced
-/+ resource "aws_subnet" "sn_pub_az2" {
      ~ arn                                            = "arn:aws:ec2:us-east-1:954238113230:subnet/subnet-041a4a741a9acc498" -> (known after apply)
      ~ availability_zone_id                           = "use1-az4" -> (known after apply)
      ~ cidr_block                                     = "10.0.2.0/24" -> "30.0.2.0/24" # forces replacement
      - enable_lni_at_device_index                     = 0 -> null
      ~ id                                             = "subnet-041a4a741a9acc498" -> (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      - map_customer_owned_ip_on_launch                = false -> null
      ~ owner_id                                       = "954238113230" -> (known after apply)
      ~ private_dns_hostname_type_on_launch            = "ip-name" -> (known after apply)
      - tags                                           = {} -> null
      ~ tags_all                                       = {} -> (known after apply)
      ~ vpc_id                                         = "vpc-09a6e7249977fa068" # forces replacement -> (known after apply) # forces replacement
        # (7 unchanged attributes hidden)
    }

  # module.network.aws_vpc.vpc must be replaced
-/+ resource "aws_vpc" "vpc" {
      ~ arn                                  = "arn:aws:ec2:us-east-1:954238113230:vpc/vpc-09a6e7249977fa068" -> (known after apply)
      - assign_generated_ipv6_cidr_block     = false -> null
      ~ cidr_block                           = "10.0.0.0/16" -> "30.0.0.0/16" # forces replacement
      ~ default_network_acl_id               = "acl-0c5af08bd868680dd" -> (known after apply)
      ~ default_route_table_id               = "rtb-0af250323bc1787f2" -> (known after apply)
      ~ default_security_group_id            = "sg-083a3a47b46ad2bd3" -> (known after apply)
      ~ dhcp_options_id                      = "dopt-092dbadfddd24aa51" -> (known after apply)
      ~ enable_classiclink                   = false -> (known after apply)
      ~ enable_classiclink_dns_support       = false -> (known after apply)
      ~ enable_network_address_usage_metrics = false -> (known after apply)
      ~ id                                   = "vpc-09a6e7249977fa068" -> (known after apply)
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      - ipv6_netmask_length                  = 0 -> null
      ~ main_route_table_id                  = "rtb-0af250323bc1787f2" -> (known after apply)
      ~ owner_id                             = "954238113230" -> (known after apply)
      - tags                                 = {} -> null
      ~ tags_all                             = {} -> (known after apply)
        # (3 unchanged attributes hidden)
    }

Plan: 21 to add, 1 to change, 21 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"


================================== ERRO AO DESTRUIR VPC ========================================================
╷
│ Error: deleting EC2 VPC (vpc-09a6e7249977fa068): DependencyViolation: The vpc 'vpc-09a6e7249977fa068' has dependencies and cannot be deleted.
│       status code: 400, request id: f7614c9a-3b87-459d-94d1-db70f0cd6170

================================= ERRO ERRO AO DESTRUIR VPC ========================================================================

- Destruí manualmente na Console AWS e dei novamente o terraform plan

D:\Checkpoint 3\app-notifier\terraform>terraform plan -out tfplan
module.network.aws_vpc.vpc: Refreshing state... [id=vpc-09a6e7249977fa068]
module.database.aws_db_parameter_group.rds_param_group: Refreshing state... [id=rds-param-group-gabriel]
module.network.aws_internet_gateway.igw: Refreshing state... [id=igw-0d78909eab1aa995e]

Note: Objects have changed outside of Terraform

Terraform detected the following changes made outside of Terraform since the last "terraform apply" which may have
affected this plan:

  # module.network.aws_internet_gateway.igw has been deleted
  - resource "aws_internet_gateway" "igw" {
      - id       = "igw-0d78909eab1aa995e" -> null
        tags     = {}
        # (4 unchanged attributes hidden)
    }

  # module.network.aws_vpc.vpc has been deleted
  - resource "aws_vpc" "vpc" {
      - id                                   = "vpc-09a6e7249977fa068" -> null
        tags                                 = {}
        # (17 unchanged attributes hidden)
    }


Unless you have made equivalent changes to your configuration, or ignored the relevant attributes using ignore_changes,
the following plan may include actions to undo or respond to these changes.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # module.compute.data.template_file.user_data will be read during apply
  # (config refers to values not yet known)
 <= data "template_file" "user_data" {
      + id       = (known after apply)
      + rendered = (known after apply)
      + template = <<-EOT
            #!/bin/bash


            # 1- Update/Install required OS packages
            yum update -y
            amazon-linux-extras install -y php7.2 epel
            yum install -y httpd mysql php-mtdowling-jmespath-php php-xml telnet tree git


            # 2- (Optional) Enable PHP to send AWS SNS events
            # NOTE: If uncommented, more configs are required
            # - Step 4: Deploy PHP app
            # - Module Compute: compute.tf and vars.tf manifests

            # 2.1- Config AWS SDK for PHP
            # mkdir -p /opt/aws/sdk/php/
            # cd /opt/aws/sdk/php/
            # wget https://docs.aws.amazon.com/aws-sdk-php/v3/download/aws.zip
            # unzip aws.zip

            # 2.2- Config AWS Account
            # mkdir -p /var/www/html/.aws/
            # cat <<EOT >> /var/www/html/.aws/credentials
            # [default]
            # aws_access_key_id=12345
            # aws_secret_access_key=12345
            # aws_session_token=12345
            # EOT


            # 3- Config PHP app Connection to Database
            cat <<EOT >> /var/www/config.php
            <?php
            define('DB_SERVER', '${rds_endpoint}');
            define('DB_USERNAME', '${rds_dbuser}');
            define('DB_PASSWORD', '${rds_dbpassword}');
            define('DB_DATABASE', '${rds_dbname}');
            ?>
            EOT


            # 4- Deploy PHP app
            cd /tmp
            git clone https://github.com/kledsonhugo/notifier
            cp /tmp/notifier/app/*.php /var/www/html/
            # mv /var/www/html/sendsms.php /var/www/html/index.php
            rm -rf /tmp/notifier


            # 5- Config Apache WebServer
            usermod -a -G apache ec2-user
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} \;
            find /var/www -type f -exec chmod 0664 {} \;


            # 6- Start Apache WebServer
            systemctl enable httpd
            service httpd restart
        EOT
      + vars     = {
          + "rds_dbname"     = "rdsdbgabriel"
          + "rds_dbpassword" = "rdsdbadminpwd"
          + "rds_dbuser"     = "rdsdbadmin"
          + "rds_endpoint"   = (known after apply)
        }
    }

  # module.compute.aws_autoscaling_group.ec2_asg will be created
  + resource "aws_autoscaling_group" "ec2_asg" {
      + arn                       = (known after apply)
      + availability_zones        = (known after apply)
      + default_cooldown          = (known after apply)
      + desired_capacity          = 4
      + force_delete              = false
      + force_delete_warm_pool    = false
      + health_check_grace_period = 300
      + health_check_type         = (known after apply)
      + id                        = (known after apply)
      + max_size                  = 8
      + metrics_granularity       = "1Minute"
      + min_size                  = 2
      + name                      = "ec2-asg-gabriel"
      + name_prefix               = (known after apply)
      + protect_from_scale_in     = false
      + service_linked_role_arn   = (known after apply)
      + target_group_arns         = (known after apply)
      + vpc_zone_identifier       = (known after apply)
      + wait_for_capacity_timeout = "10m"

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = "$Latest"
        }
    }

  # module.compute.aws_launch_template.ec2_lt will be created
  + resource "aws_launch_template" "ec2_lt" {
      + arn                    = (known after apply)
      + default_version        = (known after apply)
      + id                     = (known after apply)
      + image_id               = "ami-069aabeee6f53e7bf"
      + instance_type          = "t2.micro"
      + key_name               = "vockey"
      + latest_version         = (known after apply)
      + name                   = "ec2-lt-gabriel"
      + name_prefix            = (known after apply)
      + tags_all               = (known after apply)
      + user_data              = (known after apply)
      + vpc_security_group_ids = (known after apply)
    }

  # module.compute.aws_lb.ec2_lb will be created
  + resource "aws_lb" "ec2_lb" {
      + arn                                         = (known after apply)
      + arn_suffix                                  = (known after apply)
      + desync_mitigation_mode                      = "defensive"
      + dns_name                                    = (known after apply)
      + drop_invalid_header_fields                  = false
      + enable_deletion_protection                  = false
      + enable_http2                                = true
      + enable_tls_version_and_cipher_suite_headers = false
      + enable_waf_fail_open                        = false
      + enable_xff_client_port                      = false
      + id                                          = (known after apply)
      + idle_timeout                                = 60
      + internal                                    = (known after apply)
      + ip_address_type                             = (known after apply)
      + load_balancer_type                          = "application"
      + name                                        = "ec2-lb-gabriel"
      + preserve_host_header                        = false
      + security_groups                             = (known after apply)
      + subnets                                     = (known after apply)
      + tags_all                                    = (known after apply)
      + vpc_id                                      = (known after apply)
      + xff_header_processing_mode                  = "append"
      + zone_id                                     = (known after apply)
    }

  # module.compute.aws_lb_listener.ec2_lb_listener will be created
  + resource "aws_lb_listener" "ec2_lb_listener" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)
      + tags_all          = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # module.compute.aws_lb_target_group.ec2_lb_tg will be created
  + resource "aws_lb_target_group" "ec2_lb_tg" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = false
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "ec2-lb-tg-gabriel"
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "instance"
      + vpc_id                             = (known after apply)
    }

  # module.database.aws_db_instance.rds_dbinstance will be created
  + resource "aws_db_instance" "rds_dbinstance" {
      + address                               = (known after apply)
      + allocated_storage                     = 20
      + apply_immediately                     = false
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = (known after apply)
      + backup_retention_period               = (known after apply)
      + backup_window                         = (known after apply)
      + ca_cert_identifier                    = (known after apply)
      + character_set_name                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + db_name                               = "rdsdbgabriel"
      + db_subnet_group_name                  = "rds-sn-group-gabriel"
      + delete_automated_backups              = true
      + endpoint                              = (known after apply)
      + engine                                = "mysql"
      + engine_version                        = "8.0.23"
      + engine_version_actual                 = (known after apply)
      + hosted_zone_id                        = (known after apply)
      + id                                    = (known after apply)
      + identifier                            = "rds-gabriel"
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t2.micro"
      + iops                                  = (known after apply)
      + kms_key_id                            = (known after apply)
      + latest_restorable_time                = (known after apply)
      + license_model                         = (known after apply)
      + listener_endpoint                     = (known after apply)
      + maintenance_window                    = (known after apply)
      + master_user_secret                    = (known after apply)
      + master_user_secret_kms_key_id         = (known after apply)
      + max_allocated_storage                 = 0
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + multi_az                              = false
      + name                                  = (known after apply)
      + nchar_character_set_name              = (known after apply)
      + network_type                          = (known after apply)
      + option_group_name                     = (known after apply)
      + parameter_group_name                  = "rds-param-group-gabriel"
      + password                              = (sensitive value)
      + performance_insights_enabled          = false
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = (known after apply)
      + publicly_accessible                   = false
      + replica_mode                          = (known after apply)
      + replicas                              = (known after apply)
      + resource_id                           = (known after apply)
      + skip_final_snapshot                   = true
      + snapshot_identifier                   = (known after apply)
      + status                                = (known after apply)
      + storage_throughput                    = (known after apply)
      + storage_type                          = "gp2"
      + tags_all                              = (known after apply)
      + timezone                              = (known after apply)
      + username                              = "rdsdbadmin"
      + vpc_security_group_ids                = (known after apply)
    }

  # module.database.aws_db_subnet_group.rds_sn_group will be created
  + resource "aws_db_subnet_group" "rds_sn_group" {
      + arn                     = (known after apply)
      + description             = "Managed by Terraform"
      + id                      = (known after apply)
      + name                    = "rds-sn-group-gabriel"
      + name_prefix             = (known after apply)
      + subnet_ids              = (known after apply)
      + supported_network_types = (known after apply)
      + tags_all                = (known after apply)
    }

  # module.network.aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags_all = (known after apply)
      + vpc_id   = (known after apply)
    }

  # module.network.aws_route_table.rt_priv will be created
  + resource "aws_route_table" "rt_priv" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags_all         = (known after apply)
      + vpc_id           = (known after apply)
    }

  # module.network.aws_route_table.rt_pub will be created
  + resource "aws_route_table" "rt_pub" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags_all         = (known after apply)
      + vpc_id           = (known after apply)
    }

  # module.network.aws_route_table_association.rt_pub_sn_priv_az1 will be created
  + resource "aws_route_table_association" "rt_pub_sn_priv_az1" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.network.aws_route_table_association.rt_pub_sn_priv_az2 will be created
  + resource "aws_route_table_association" "rt_pub_sn_priv_az2" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.network.aws_route_table_association.rt_pub_sn_pub_az1 will be created
  + resource "aws_route_table_association" "rt_pub_sn_pub_az1" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.network.aws_route_table_association.rt_pub_sn_pub_az2 will be created
  + resource "aws_route_table_association" "rt_pub_sn_pub_az2" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.network.aws_security_group.vpc_sg_priv will be created
  + resource "aws_security_group" "vpc_sg_priv" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "30.0.0.0/16",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # module.network.aws_security_group.vpc_sg_pub will be created
  + resource "aws_security_group" "vpc_sg_pub" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "30.0.0.0/16",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # module.network.aws_subnet.sn_priv_az1 will be created
  + resource "aws_subnet" "sn_priv_az1" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "30.0.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # module.network.aws_subnet.sn_priv_az2 will be created
  + resource "aws_subnet" "sn_priv_az2" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "30.0.4.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # module.network.aws_subnet.sn_pub_az1 will be created
  + resource "aws_subnet" "sn_pub_az1" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "30.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # module.network.aws_subnet.sn_pub_az2 will be created
  + resource "aws_subnet" "sn_pub_az2" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "30.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags_all                                       = (known after apply)
      + vpc_id                                         = (known after apply)
    }

  # module.network.aws_vpc.vpc will be created
  + resource "aws_vpc" "vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "30.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags_all                             = (known after apply)
    }

Plan: 21 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"